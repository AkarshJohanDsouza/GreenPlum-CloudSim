/*
 * Title:        CloudSim Toolkit
 * Description:  CloudSim (Cloud Simulation) Toolkit for Modeling and Simulation
 *               of Clouds
 * Licence:      GPL - http://www.gnu.org/copyleft/gpl.html
 *
 * Copyright (c) 2009, The University of Melbourne, Australia
 */

//package org.cloudbus.cloudsim.examples;


import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.ObjectInputStream.GetField;
import java.text.DecimalFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Collections;
import java.util.LinkedList;
import java.util.List;

import org.cloudbus.cloudsim.Cloudlet;
import org.cloudbus.cloudsim.CloudletSchedulerSpaceShared;
import org.cloudbus.cloudsim.CloudletSchedulerTimeShared;
import org.cloudbus.cloudsim.Datacenter;
import org.cloudbus.cloudsim.DatacenterBroker;
import org.cloudbus.cloudsim.DatacenterCharacteristics;
import org.cloudbus.cloudsim.Host;
import org.cloudbus.cloudsim.Log;
import org.cloudbus.cloudsim.Pe;
import org.cloudbus.cloudsim.Storage;
import org.cloudbus.cloudsim.UtilizationModel;
import org.cloudbus.cloudsim.UtilizationModelFull;
import org.cloudbus.cloudsim.Vm;
import org.cloudbus.cloudsim.VmAllocationPolicySimple;
import org.cloudbus.cloudsim.VmSchedulerTimeShared;
import org.cloudbus.cloudsim.core.CloudSim;
import org.cloudbus.cloudsim.core.SimEvent;
import org.cloudbus.cloudsim.provisioners.BwProvisionerSimple;
import org.cloudbus.cloudsim.provisioners.PeProvisionerSimple;
import org.cloudbus.cloudsim.provisioners.RamProvisionerSimple;

public class Test4 implements SharedEverything{

	/** The Task list. */
	private static List<Cloudlet> tasklist;
	private static List<Integer> numCloudlets;
	private static List<Long> boundCloudletsLength;

	/** The SegmentInstances. */
	private static List<Vm> segmentInstanceList;

	public static void main(String[] args) {

		
		Log.printLine("Starting GreenPlum...");

	        try {
	        	
	            	int num_user = 1;   // number of cloud users
	            	Calendar calendar = Calendar.getInstance();
	            	boolean trace_flag = false;  // mean trace events
	            	
	            	// Initialize the CloudSim library
	            	CloudSim.init(num_user, calendar, trace_flag);

	            	// Second step: Create Datacenters
	            	//Datacenters are the resource providers in CloudSim. We need at list one of them to run a CloudSim simulation
	            	@SuppressWarnings("unused")
					Datacenter datacenter0 = createDatacenter("Datacenter_0");

	            	//Third step: Create Broker
	            	DatacenterBroker broker = createBroker();
	            	int brokerId = broker.getId();

	            	//Fourth step: Create one virtual machine
	            	segmentInstanceList = new ArrayList<Vm>();
	            	
	            	//VM description
	            	int segmentId = 0;
	            	int mips = 100;
	            	long size = 10000; //image size (MB)
	            	int ram = 512; //vm memory (MB)
	            	long bw = 1000;
	            	int pesNumber = 1; //number of cpus
	            	String vmm = "Xen"; //VMM name
	            	String segmentfile="/home/akarsh/greenplum/CloudSim/src/segmentfile";
	            	////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	            	//	READ VM CHARACTERISTICS
	            	boundCloudletsLength=new ArrayList<Long>();
	            	numCloudlets=new ArrayList<Integer>();
	            		  try {
	            	           
	            	            CsvReader csv = new CsvReader(segmentfile+".csv");
	            	       
	            	            csv.readHeaders();

	            	            while (csv.readRecord())
	            	            {
	            	              segmentId=Integer.parseInt(csv.get("segmentId"));
	            	              mips=Integer.parseInt(csv.get("mips"));
	            	              size=Long.parseLong(csv.get("size"));
	            	              ram=Integer.parseInt(csv.get("ram"));
	            	              bw=Long.parseLong(csv.get("bw"));
	            	              pesNumber=Integer.parseInt(csv.get("pesnumber"));
	            	              
	            	              Vm segmentInstance = new Vm(segmentId, brokerId, mips, pesNumber, ram, bw, size, vmm, new CloudletSchedulerTimeShared());
	            	              segmentInstanceList.add(segmentInstance);
	            	              boundCloudletsLength.add((long) 0);
	            	              numCloudlets.add(0);
	            	            }
	            	   
	            	            csv.close();
	            	           
	            	        } catch (FileNotFoundException e) {
	            	            e.printStackTrace();
	            	        } catch (IOException e) {
	            	            e.printStackTrace();
	            	        }
	            	//	  for(int i=0;i<boundCloudletsLength.size();i++)
	            	//			boundCloudletsLength.set(i, (long) 0);
	            		  
	        
	            	//submit vm list to the broker
	            	broker.submitVmList(segmentInstanceList);


	            	//Fifth step: Create two Cloudlets
	            	tasklist = new ArrayList<Cloudlet>();
	            	
	            	//Cloudlet properties
	            	int id = 0;
	            	pesNumber=1;
	            	long length = 100000;
	            	long fileSize = 300;
	            	long outputSize = 300;
	            	int hostsegid[]=new int[100];
	            	double executionStartTime;
	            	UtilizationModel utilizationModel = new UtilizationModelFull();
	            	String TASKFILE="/home/akarsh/greenplum/CloudSim/src/taskfile";
	            	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	            	  try {
           	           
          	            CsvReader csv = new CsvReader(TASKFILE+".csv");
          	       
          	            csv.readHeaders();

          	            while (csv.readRecord())
          	            {
          	              id=Integer.parseInt(csv.get("id"));
          	              pesNumber=Integer.parseInt(csv.get("pesnumber"));
          	              length=Long.parseLong(csv.get("length"));
          	              hostsegid[id]=Integer.parseInt(csv.get("hostsegid"));
          	              executionStartTime=Double.parseDouble(csv.get("execStart"));
          	              
          	            Cloudlet task = new Cloudlet(id, length, pesNumber, fileSize, outputSize, utilizationModel, utilizationModel, utilizationModel);
    	            	task.setUserId(brokerId);
    	            	task.setExecStartTime(executionStartTime);
    	            	tasklist.add(task);
    	            	
          	            }
          	   
          	            csv.close();
          	           
          	        } catch (FileNotFoundException e) {
          	            e.printStackTrace();
          	        } catch (IOException e) {
          	            e.printStackTrace();
          	        }
	            	 // Collections.sort(tasklist,(new Cloudlet()).getExecStartTime());
	            	  broker.submitCloudletList(tasklist);
	            	  int reqvm;
	            	  for(int i=0;i<tasklist.size();i++)
	            	  {
	            		  reqvm=(new Test4()).findVm(tasklist.get(i));
	            		  broker.bindCloudletToVm(tasklist.get(i).getCloudletId(),reqvm);
	            		  //if(numCloudlets.get(reqvm)>1)
	            		  //segmentInstanceList.get(reqvm).getCloudletScheduler().cloudletPause(i);
	            	  }
	            	  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	            	// Sixth step: Starts the simulation
	            	CloudSim.startSimulation();

	            	// Final step: Print results when simulation is over
	            	CloudSim.pauseSimulation();
	            	System.out.println();
	            	CloudSim.resumeSimulation();
	            	List<Cloudlet> newList = broker.getCloudletReceivedList();

	            	CloudSim.stopSimulation();

	            	printCloudletList(newList);

	            	Log.printLine("CloudSimExample2 finished!");
	        }
	        catch (Exception e) {
	            e.printStackTrace();
	            Log.printLine("The simulation has been terminated due to an unexpected error");
	        }
	    }

		private static Datacenter createDatacenter(String name){

	        // Here are the steps needed to create a PowerDatacenter:
	        // 1. We need to create a list to store
	    	//    our machine
	    	List<Host> hostList = new ArrayList<Host>();

	        // 2. A Machine contains one or more PEs or CPUs/Cores.
	    	// In this example, it will have only one core.
	    	List<Pe> peList = new ArrayList<Pe>();

	    	int mips = 1000;
	        //4. Create Host with its id and list of PEs and add them to the list of machines
	        int hostId=0;
	        int ram = 2048; //host memory (MB)
	        long storage = 1000000; //host storage
	        int bw = 10000;
	        String HOSTFILE="/home/akarsh/greenplum/CloudSim/src/HOSTFILE";
	        int pesNumber=1;
	        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	        try {
 	           
	            CsvReader csv = new CsvReader(HOSTFILE+".csv");
	       
	            csv.readHeaders();

	            while (csv.readRecord())
	            {
	              hostId=Integer.parseInt(csv.get("hostId"));
	              mips=Integer.parseInt(csv.get("mips"));
	              storage=Long.parseLong(csv.get("storage"));
	              ram=Integer.parseInt(csv.get("ram"));
	              bw=Integer.parseInt(csv.get("bw"));
	              pesNumber=Integer.parseInt(csv.get("pesnumber"));
	              
	              for(int i=0;i<pesNumber;i++)
	              {
	            	  peList.add(new Pe(i, new PeProvisionerSimple(mips)));
	              }
	              hostList.add(
	  	    			new Host(
	  	    				hostId,
	  	    				new RamProvisionerSimple(ram),
	  	    				new BwProvisionerSimple(bw),
	  	    				storage,
	  	    				peList,
	  	    				new VmSchedulerTimeShared(peList)
	  	    			)
	  	    		); // This is our machine
	              }
	   
	            csv.close();
	           
	        } catch (FileNotFoundException e) {
	            e.printStackTrace();
	        } catch (IOException e) {
	            e.printStackTrace();
	        }
	        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	        // 5. Create a DatacenterCharacteristics object that stores the
	        //    properties of a data center: architecture, OS, list of
	        //    Machines, allocation policy: time- or space-shared, time zone
	        //    and its price (G$/Pe time unit).
	        String arch = "x86";      // system architecture
	        String os = "Linux";          // operating system
	        String vmm = "Xen";
	        double time_zone = 10.0;         // time zone this resource located
	        double cost = 3.0;              // the cost of using processing in this resource
	        double costPerMem = 0.05;		// the cost of using memory in this resource
	        double costPerStorage = 0.001;	// the cost of using storage in this resource
	        double costPerBw = 0.0;			// the cost of using bw in this resource
	        LinkedList<Storage> storageList = new LinkedList<Storage>();	//we are not adding SAN devices by now

	        DatacenterCharacteristics characteristics = new DatacenterCharacteristics(
	                arch, os, vmm, hostList, time_zone, cost, costPerMem, costPerStorage, costPerBw);


	        // 6. Finally, we need to create a PowerDatacenter object.
	        Datacenter datacenter = null;
	        try {
	            datacenter = new Datacenter(name, characteristics, new VmAllocationPolicySimple(hostList), storageList, 0);
	        } catch (Exception e) {
	            e.printStackTrace();
	        }

	        return datacenter;
	    }

	    //We strongly encourage users to develop their own broker policies, to submit vms and cloudlets according
	    //to the specific rules of the simulated scenario
	    private static DatacenterBroker createBroker(){

	    	DatacenterBroker broker = null;
	        try {
			broker = new DatacenterBroker("Broker");
		} catch (Exception e) {
			e.printStackTrace();
			return null;
		}
	    	return broker;
	    }

	    /**
	     * Prints the Cloudlet objects
	     * @param list  list of Cloudlets
	     */
	    private static void printCloudletList(List<Cloudlet> list) {
	        int size = list.size();
	        Cloudlet cloudlet;

	        String indent = "    ";
	        Log.printLine();
	        Log.printLine("========== OUTPUT ==========");
	        Log.printLine("Task ID" + indent + "STATUS" + indent +
	                "Data center ID" + indent + "Seg ID" + indent + "Time" + indent + "Start Time" + indent + "Finish Time");

	        DecimalFormat dft = new DecimalFormat("###.##");
	        for (int i = 0; i < size; i++) {
	            cloudlet = list.get(i);
	            Log.print(indent + cloudlet.getCloudletId() + indent + indent);

	            if (cloudlet.getCloudletStatus() == Cloudlet.SUCCESS){
	                Log.print("SUCCESS");

	            	Log.printLine( indent + indent + cloudlet.getResourceId() + indent + indent + indent + cloudlet.getVmId() +
	                     indent + indent + dft.format(cloudlet.getActualCPUTime()) + indent + indent + dft.format(cloudlet.getExecStartTime())+
                             indent + indent + dft.format(cloudlet.getFinishTime()));
	            }
	        }

	    }
	    public int findVm(Cloudlet cloudlet)
	    {
	    	System.out.println("Iteration");
	    	int resvmid=0;
	    	long clAcc=0;
	    	long mintime=Long.MAX_VALUE;
	    	//List<Integer> boundCloudlets =  new ArrayList<Integer>();
	    	//int boundCloudletsLength[] = new int[segmentInstanceList.size()];
	    //	for(int i=0;i<segmentInstanceList.size();i++)
	    	//	boundCloudletsLength[i]=0;
	    	for(int i=0;i<segmentInstanceList.size();i++)
	    	{
	    		
	    		clAcc = boundCloudletsLength.get(i)+cloudlet.getCloudletLength();
	    		System.out.println(clAcc);
	    		System.out.println(boundCloudletsLength.get(i));
	    		//System.out.println();
	    		long currTime=(long) (clAcc/segmentInstanceList.get(i).getMips());
	    		System.out.println(currTime);
	    		System.out.println();
	    		if(currTime<mintime)
	    		{
	    			resvmid=i;
	    			mintime=currTime;
	    			
	    		//	boundCloudlets.add(i);
	    		}
	    		
	    		
	    	}
	    	numCloudlets.set(resvmid, numCloudlets.get(resvmid)+1);
	    	boundCloudletsLength.set(resvmid, clAcc);
			return resvmid;
	    	
	    }
}
